name: Build and publish a new image
on:
  release:
    types:
      - published
permissions:
  contents: write
  packages: write
jobs:
  new_image_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Get latest release tag
        run: |
          repo_user=$(echo ${{ github.repository }} | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')
          repo_name=$(echo ${{ github.repository }} | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          release_url="https://api.github.com/repos/$repo_user/$repo_name/releases/latest"
          release_tag=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$release_url" | jq -r ".tag_name")
          echo "LATEST_RELEASE_TAG=$release_tag" >> $GITHUB_ENV
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV
          echo "REPO_USER=$repo_user" >> $GITHUB_ENV
          if [[ -z "$release_tag" ]]; then echo "variable release_tag is empty!" && exit 1; fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO_USER }}/${{ env.REPO_NAME }}:${{ env.LATEST_RELEASE_TAG }}
            ghcr.io/${{ env.REPO_USER }}/${{ env.REPO_NAME }}:latest
      - name: Set up anybadge
        run: |
          python -m pip install --upgrade pip
          pip install anybadge
      - name: Generate badge
        run: |
          anybadge --value ghcr.io/${{ env.REPO_USER }}/${{ env.REPO_NAME }}:${{ env.LATEST_RELEASE_TAG }} \
          --file=./.github/badges/image.svg --label 'ghcr.io image' --color fuchsia --overwrite
      - name: Commit badge to repo
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ./.github/badges/image.svg
          # Check for changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Update image badge [skip ci]"
          git pull --rebase
          git push
